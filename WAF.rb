#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'


class WAFParser < Racc::Parser

module_eval(<<'...end WAF.y/module_eval...', 'WAF.y', 18)

def parse(str)
	@q = []
	registered_action = {}
	remove_comment(str)

	until str.empty?
		case str
		when /^(get|post|delete|head) (\/.*)$((?:\n[\s&&[^\n]]+.+)+)$/
			@q.push [:REQ_MET, $1]
			@q.push [:REQ, $2]
			@q.push [:LOG, $3]
		when /^$/
      break
		end

		str = $'
    @q.push [false, '$end']
    registered_action.merge!(do_parse)
	end

  registered_action
end

def next_token
	@q.shift
end

def remove_comment(str)
	str.gsub!(/\s*#.*$/, '')
end

...end WAF.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     4,     6,     7,     9 ]

racc_action_check = [
     0,     1,     2,     4,     5 ]

racc_action_pointer = [
    -2,     1,    -1,   nil,     3,     0,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -5,    -5,    -5,    -2,    -5,    -5,    -3,    10,    -1,    -4 ]

racc_goto_table = [
     1,     2,     5,     8 ]

racc_goto_check = [
     1,     2,     3,     4 ]

racc_goto_pointer = [
   nil,     0,     1,     0,    -2 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 6, :_reduce_1,
  1, 7, :_reduce_none,
  1, 8, :_reduce_none,
  1, 9, :_reduce_none ]

racc_reduce_n = 5

racc_shift_n = 10

racc_token_table = {
  false => 0,
  :error => 1,
  :REQ_MET => 2,
  :REQ => 3,
  :LOG => 4 }

racc_nt_base = 5

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "REQ_MET",
  "REQ",
  "LOG",
  "$start",
  "syntax",
  "request_method",
  "request",
  "action_logics" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'WAF.y', 4)
  def _reduce_1(val, _values, result)
    		result = { "#{val[0].upcase} #{val[1]}" => val[2] }
	
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class WAFParser


require 'rack'
require 'haml'

parser = WAFParser.new

File.open("app.waf") do |f|
	$result = parser.parse(f.read)
end

class Application
	def self.call(env)
		request = Rack::Request.new(env)
		block = $result["#{request.request_method} #{request.path_info}"]
		body = nil

		case block
		when /^\s+haml :([^\s]+)/
			File.open("views/#{$1}.haml") do |t|
				body = Haml::Engine.new(t.read).render
			end
		else
			action_logics = "params = #{request.params};" + block.to_s
			body = eval(action_logics)
		end

		Rack::Response.new do |r|
			r.status = 200
			r['Content-Type'] = 'text/html;charset=utf8'
			r.write body
		end.finish
	end
end
